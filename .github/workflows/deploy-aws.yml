name: Deploy to AWS

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  APP_NAME: freedom-fashion

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: freedom_fashion_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        cat > .env << EOF
        NODE_ENV=test
        DATABASE_HOST=localhost
        DATABASE_PORT=5432
        DATABASE_NAME=freedom_fashion_test
        DATABASE_USER=postgres
        DATABASE_PASSWORD=test_password
        DATABASE_SSL=false
        REDIS_HOST=localhost
        REDIS_PORT=6379
        JWT_SECRET=test_jwt_secret
        SESSION_SECRET=test_session_secret
        ENABLE_SCRAPING=false
        ENABLE_ANALYTICS=true
        ENABLE_NOTIFICATIONS=false
        ENABLE_PRICE_ALERTS=false
        EOF

    - name: Run database migrations
      run: npm run db:migrate

    - name: Run tests
      run: |
        # Add your test commands here
        npm run validate-config
        node test-database.js
        echo "✅ All tests passed"

    - name: Lint and validate Docker configuration
      run: |
        npm run docker:validate
        echo "✅ Docker configuration validated"

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.APP_NAME }}
        IMAGE_TAG: staging-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest

    - name: Deploy to staging
      env:
        ENVIRONMENT: staging
        DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
      run: |
        cd cloud/aws
        chmod +x deploy-aws.sh
        ./deploy-aws.sh deploy

    - name: Run staging health checks
      run: |
        # Wait for deployment to complete
        sleep 60
        
        # Get the staging URL from CloudFormation outputs
        STAGING_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.APP_NAME }}-staging \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerURL`].OutputValue' \
          --output text)
        
        # Health check
        echo "Testing staging deployment at: $STAGING_URL"
        curl -f "$STAGING_URL/health/quick" || exit 1
        echo "✅ Staging deployment successful"

  deploy-production:
    needs: [test, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.APP_NAME }}
        IMAGE_TAG: prod-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Deploy to production
      env:
        ENVIRONMENT: production
        DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
        DOMAIN_NAME: ${{ secrets.PRODUCTION_DOMAIN_NAME }}
      run: |
        cd cloud/aws
        chmod +x deploy-aws.sh
        ./deploy-aws.sh deploy

    - name: Run production health checks
      run: |
        # Wait for deployment to complete
        sleep 60
        
        # Get the production URL from CloudFormation outputs
        PRODUCTION_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.APP_NAME }}-production \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerURL`].OutputValue' \
          --output text)
        
        # Health check
        echo "Testing production deployment at: $PRODUCTION_URL"
        curl -f "$PRODUCTION_URL/health/quick" || exit 1
        echo "✅ Production deployment successful"

    - name: Notify deployment success
      if: success()
      run: |
        echo "🎉 Freedom Fashion Platform deployed successfully to production!"
        echo "Production URL: $PRODUCTION_URL"
        
        # Add Slack/Discord notification here if desired
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"✅ Freedom Fashion deployed to production!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/production'
    needs: [deploy-production]
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Rollback ECS service
      run: |
        echo "⚠️ Production deployment failed, initiating rollback..."
        
        # Get previous stable task definition
        PREVIOUS_TASK_DEF=$(aws ecs describe-services \
          --cluster ${{ env.APP_NAME }}-cluster \
          --services ${{ env.APP_NAME }}-service \
          --query 'services[0].deployments[1].taskDefinition' \
          --output text)
        
        if [ "$PREVIOUS_TASK_DEF" != "None" ]; then
          # Update service to use previous task definition
          aws ecs update-service \
            --cluster ${{ env.APP_NAME }}-cluster \
            --service ${{ env.APP_NAME }}-service \
            --task-definition $PREVIOUS_TASK_DEF
          
          echo "🔄 Rollback initiated to: $PREVIOUS_TASK_DEF"
        else
          echo "❌ No previous task definition found for rollback"
        fi

    - name: Notify rollback
      run: |
        echo "🚨 Production deployment failed and rollback was initiated"
        # Add notification logic here
